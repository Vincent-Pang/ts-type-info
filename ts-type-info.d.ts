// auto-generated by generate-definition-file
declare module "ts-type-info" {
   export class BasePropertyDefinition {
       name: string;
       type: Type;
   }

   export class DecoratableDefinition {
       decorators: DecoratorDefinition[];
   }

   export class ExportableDefinition {
       isExported: boolean;
   }

   export class NamedDefinition {
       name: string;
   }

   export class ScopedDefinition {
       scope: Scope;
   }

   export class TypedDefinition {
       type: Type;
   }

   export class ArgumentDefinition {
       text: string;
   }

   export class BaseFunctionDefinition<T>  {
       name: string;
       parameters: T[];
       returnType: Type;
   }

   export class BaseParameterDefinition {
       isRequired: boolean;
       isRestParameter: boolean;
       name: string;
       type: Type;
   }

   export class ParameteredDefinition<T>  {
       parameters: T[];
   }

   export class ReturnTypedDefinition {
       returnType: Type;
   }

   export class CallSignatureDefinition {
       minArgumentCount: number;
       typeParameters: TypeParameterDefinition[];
       parameters: ParameterDefinition[];
       returnType: Type;
   }

   export class FunctionDefinition extends BaseFunctionDefinition<BaseParameterDefinition> {
       isExported: boolean;
   }

   export class ParameterDefinition extends BaseParameterDefinition {
   }

   export class BaseClassMethodDefinition extends BaseFunctionDefinition<BaseParameterDefinition> {
       decorators: DecoratorDefinition[];
       scope: Scope;
   }

   export class BaseClassPropertyDefinition extends BasePropertyDefinition {
       decorators: DecoratorDefinition[];
       scope: Scope;
   }

   export class ClassDefinition {
       baseClasses: ClassDefinition[];
       constructorDef: ConstructorDefinition;
       methods: ClassMethodDefinition[];
       properties: ClassPropertyDefinition[];
       staticMethods: StaticMethodDefinition[];
       staticProperties: StaticPropertyDefinition[];
       typeParameters: TypeParameterDefinition[];
       name: string;
       decorators: DecoratorDefinition[];
       isExported: boolean;
   }

   export class ClassMethodDefinition extends BaseClassMethodDefinition {
   }

   export class ClassMethodParameterDefinition extends BaseParameterDefinition {
       decorators: DecoratorDefinition[];
   }

   export class ClassPropertyDefinition extends BaseClassPropertyDefinition {
       isAccessor: boolean;
       isReadonly: boolean;
   }

   export class ConstructorDefinition {
       parameters: ClassMethodParameterDefinition[];
   }

   export class StaticMethodDefinition extends BaseClassMethodDefinition {
   }

   export class StaticPropertyDefinition extends BaseClassPropertyDefinition {
   }

   export class DecoratorDefinition {
       name: string;
       arguments: ArgumentDefinition[];
   }

   export class EnumDefinition {
       members: EnumMemberDefinition[];
       name: string;
       isExported: boolean;
   }

   export class EnumMemberDefinition {
       value: number;
       name: string;
   }

   export class PropertyDefinition extends BasePropertyDefinition {
   }

   export class FileDefinition {
       fileName: string;
       classes: ClassDefinition[];
       enums: EnumDefinition[];
       functions: FunctionDefinition[];
       reExports: ReExportDefinition[];
   }

   export class ReExportDefinition {
       file: FileDefinition;
       definition: any; // temp... not implemented
   }

   export class TypeParameterDefinition {
       constraint: Type;
       name: string;
   }

   export class Type {
       name: string;
       properties: PropertyDefinition[];
       callSignatures: CallSignatureDefinition[];
   }

   export enum Scope {
       public = 0,
       protected = 1,
       private = 2
   }

   export function getFileInfo(fileNames: string[]): FileDefinition[];
   export function getStringInfo(code: string): FileDefinition;
}
