// auto-generated by generate-definition-file
declare module "ts-type-info" {
   class Type {
       name: string;
       properties: PropertyDefinition[];
       callSignatures: CallSignatureDefinition[];
   }

   class NamedDefinition {
       name: string;
   }

   class TypedDefinition {
       type: Type;
   }

   class BasePropertyDefinition {
       name: string;
       type: Type;
   }

   class DecoratorDefinition {
       name: string;
       arguments: ArgumentDefinition[];
   }

   class DecoratableDefinition {
       decorators: DecoratorDefinition[];
   }

   class ExportableDefinition {
       isExported: boolean;
   }

   class ScopedDefinition {
       scope: Scope;
   }

   class ArgumentDefinition {
       text: string;
   }

   class BaseParameterDefinition {
       isRequired: boolean;
       isRestParameter: boolean;
       name: string;
       type: Type;
   }

   class ParameteredDefinition {
       parameters: T[];
   }

   class ReturnTypedDefinition {
       returnType: Type;
   }

   class BaseFunctionDefinition {
       name: string;
       parameters: T[];
       returnType: Type;
   }

   class CallSignatureDefinition {
       minArgumentCount: number;
       typeParameters: TypeParameterDefinition[];
       parameters: ParameterDefinition[];
       returnType: Type;
   }

   class ParameterDefinition extends BaseParameterDefinition {
   }

   class FunctionDefinition extends BaseFunctionDefinition {
       isExported: boolean;
   }

   class ClassMethodParameterDefinition extends BaseParameterDefinition {
       decorators: DecoratorDefinition[];
   }

   class BaseClassMethodDefinition extends BaseFunctionDefinition {
       decorators: DecoratorDefinition[];
       scope: Scope;
   }

   class BaseClassPropertyDefinition extends BasePropertyDefinition {
       decorators: DecoratorDefinition[];
       scope: Scope;
   }

   class ConstructorDefinition {
       parameters: ClassMethodParameterDefinition[];
   }

   class ClassMethodDefinition extends BaseClassMethodDefinition {
   }

   class ClassPropertyDefinition extends BaseClassPropertyDefinition {
       isAccessor: boolean;
       isReadonly: boolean;
   }

   class StaticMethodDefinition extends BaseClassMethodDefinition {
   }

   class StaticPropertyDefinition extends BaseClassPropertyDefinition {
   }

   class TypeParameterDefinition {
       constraint: Type;
       name: string;
   }

   class ClassDefinition {
       baseClasses: ClassDefinition[];
       constructorDef: ConstructorDefinition;
       methods: ClassMethodDefinition[];
       properties: ClassPropertyDefinition[];
       staticMethods: StaticMethodDefinition[];
       staticProperties: StaticPropertyDefinition[];
       typeParameters: TypeParameterDefinition[];
       name: string;
       decorators: DecoratorDefinition[];
       isExported: boolean;
   }

   class EnumMemberDefinition {
       value: number;
       name: string;
   }

   class EnumDefinition {
       members: EnumMemberDefinition[];
       name: string;
       isExported: boolean;
   }

   class PropertyDefinition extends BasePropertyDefinition {
   }

   class FileDefinition {
       name: string;
       classes: ClassDefinition[];
       enums: EnumDefinition[];
       functions: FunctionDefinition[];
   }

   export enum Scope {
       public,
       protected,
       private
   }

   export function getFileInfo(fileNames: string[]): FileDefinition[];
}
