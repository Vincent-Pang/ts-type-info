// auto-generated by: gulp generate-definition-file
declare module "ts-type-info" {
   export interface IDecoratableDefinition {
       decorators: DecoratorDefinition[];
   }

   export interface IExportableDefinition {
       isExported: boolean;
   }

   export interface IBaseNamedDefinition {
       name: string;
   }

   export interface INamedDefinition extends IBaseNamedDefinition {
   }

   export interface IScopedDefinition {
       scope: Scope;
   }

   export interface ITypedDefinition {
       typeExpression: TypeExpression;
   }

   export interface BaseParameterDefinitionConstructor<T>  {
   }

   export interface IParameteredDefinition<T>  {
       parameters: T[];
   }

   export interface IReturnTypedDefinition {
       returnTypeExpression: TypeExpression;
   }

   export class DecoratorDefinition {
       name: string;
       arguments: ArgumentDefinition[];
   }

   export class TypeParameterDefinition {
       constraint: TypeExpression;
       name: string;
   }

   export class DecoratableDefinition {
       decorators: DecoratorDefinition[];
   }

   export class ExportableDefinition {
       isExported: boolean;
   }

   export class NamedDefinition {
       name: string;
   }

   export class PropertyDefinition {
       isOptional: boolean;
       name: string;
       typeExpression: TypeExpression;
   }

   export class ScopedDefinition {
       scope: Scope;
   }

   export class TypedDefinition {
       typeExpression: TypeExpression;
   }

   export class ArgumentDefinition {
       text: string;
   }

   export class BaseFunctionDefinition<T>  {
       typeParameters: TypeParameterDefinition[];
       name: string;
       parameters: T[];
       returnTypeExpression: TypeExpression;
   }

   export class BaseParameterDefinition {
       isOptional: boolean;
       isRestParameter: boolean;
       name: string;
       typeExpression: TypeExpression;
   }

   export class ParameteredDefinition<T>  {
       parameters: T[];
   }

   export class ReturnTypedDefinition {
       returnTypeExpression: TypeExpression;
   }

   export class CallSignatureDefinition {
       minArgumentCount: number;
       typeParameters: TypeParameterDefinition[];
       parameters: ParameterDefinition[];
       returnTypeExpression: TypeExpression;
   }

   export class FunctionDefinition extends BaseFunctionDefinition<ParameterDefinition> {
       isExported: boolean;
   }

   export class ParameterDefinition extends BaseParameterDefinition {
   }

   export class BaseClassMethodDefinition extends BaseFunctionDefinition<ClassMethodParameterDefinition> {
       decorators: DecoratorDefinition[];
       scope: Scope;
   }

   export class BaseClassPropertyDefinition extends PropertyDefinition {
       decorators: DecoratorDefinition[];
       scope: Scope;
   }

   export class ClassDefinition {
       extends: TypeExpression[];
       implements: TypeExpression[];
       constructorDef: ConstructorDefinition;
       methods: ClassMethodDefinition[];
       properties: ClassPropertyDefinition[];
       staticMethods: StaticMethodDefinition[];
       staticProperties: StaticPropertyDefinition[];
       typeParameters: TypeParameterDefinition[];
       name: string;
       decorators: DecoratorDefinition[];
       isExported: boolean;
   }

   export class ClassMethodDefinition extends BaseClassMethodDefinition {
   }

   export class ClassMethodParameterDefinition extends BaseParameterDefinition {
       decorators: DecoratorDefinition[];
   }

   export class ClassPropertyDefinition extends BaseClassPropertyDefinition {
       isAccessor: boolean;
       isReadonly: boolean;
   }

   export class ConstructorDefinition {
       parameters: ClassMethodParameterDefinition[];
   }

   export class StaticMethodDefinition extends BaseClassMethodDefinition {
   }

   export class StaticPropertyDefinition extends BaseClassPropertyDefinition {
   }

   export class EnumDefinition {
       members: EnumMemberDefinition[];
       name: string;
       isExported: boolean;
   }

   export class EnumMemberDefinition {
       value: number;
       name: string;
   }

   export class InterfaceDefinition {
       extends: TypeExpression[];
       methods: InterfaceMethodDefinition[];
       newSignatures: InterfaceNewSignatureDefinition[];
       properties: PropertyDefinition[];
       typeParameters: TypeParameterDefinition[];
       name: string;
       isExported: boolean;
   }

   export class InterfaceMethodDefinition extends BaseFunctionDefinition<ParameterDefinition> {
   }

   export class InterfaceNewSignatureDefinition {
       parameters: ParameterDefinition[];
       returnTypeExpression: TypeExpression;
   }

   export class FileDefinition {
       fileName: string;
       classes: ClassDefinition[];
       enums: EnumDefinition[];
       functions: FunctionDefinition[];
       interfaces: InterfaceDefinition[];
       imports: ImportDefinition[];
       reExports: ReExportDefinition[];
   }

   export class ImportDefinition {
       file: FileDefinition;
       definition: IBaseNamedDefinition & IExportableDefinition;
   }

   export class ReExportDefinition {
       file: FileDefinition;
       definition: IBaseNamedDefinition & IExportableDefinition;
   }

   export class Type {
       text: string;
       properties: PropertyDefinition[];
       callSignatures: CallSignatureDefinition[];
       definition: IBaseNamedDefinition;
       typeArguments: TypeExpression[];
   }

   export class TypeExpression {
       text: string;
       types: Type[];
   }

   export enum Scope {
       public = 0,
       protected = 1,
       private = 2
   }

   export function getFileInfo(fileNames: string[]): FileDefinition[];
   export function getStringInfo(code: string): FileDefinition;
}
