{"version":3,"sources":["utils/type-checker.ts"],"names":["TypeChecker","TypeChecker.constructor","TypeChecker.getSymbolAtLocation","TypeChecker.getTypeOfSymbol","TypeChecker.getSymbolsInScope","TypeChecker.getFullyQualifiedName","TypeChecker.getBaseTypeSymbols"],"mappings":"AACA,sBAAmB,YAAY,CAAC,CAAA;AAEhC;IACIA,qBAAoBA,WAA2BA,EAAUA,IAAaA;QAAlDC,gBAAWA,GAAXA,WAAWA,CAAgBA;QAAUA,SAAIA,GAAJA,IAAIA,CAASA;IACtEA,CAACA;IAEDD,yCAAmBA,GAAnBA,UAAoBA,IAAaA;QAC7BE,MAAMA,CAAEA,IAAYA,CAACA,MAAMA,CAACA;IAChCA,CAACA;IAEDF,qCAAeA,GAAfA,UAAgBA,MAAiBA;QAC7BG,MAAMA,CAACA,IAAIA,YAAIA,CAACA,IAAIA,CAACA,WAAWA,EAAEA,IAAIA,CAACA,WAAWA,CAACA,yBAAyBA,CAACA,MAAMA,EAAEA,IAAIA,CAACA,IAAIA,CAACA,EAAEA,IAAIA,CAACA,IAAIA,CAACA,CAACA;IAChHA,CAACA;IAEDH,uCAAiBA,GAAjBA,UAAkBA,IAAaA,EAAEA,KAAqBA;QAClDI,MAAMA,CAACA,IAAIA,CAACA,WAAWA,CAACA,iBAAiBA,CAACA,IAAIA,EAAEA,KAAKA,CAACA,CAACA;IAC3DA,CAACA;IAEDJ,2CAAqBA,GAArBA,UAAsBA,MAAiBA;QACnCK,MAAMA,CAACA,IAAIA,CAACA,WAAWA,CAACA,qBAAqBA,CAACA,MAAMA,CAACA,CAACA;IAC1DA,CAACA;IAEDL,wCAAkBA,GAAlBA,UAAmBA,WAAsBA;QACrCM,MAAMA,CAACA,IAAIA,CAACA,WAAWA,CAACA,YAAYA,CAACA,IAAIA,CAACA,eAAeA,CAACA,WAAWA,CAACA,CAACA,MAAaA,CAACA,CAACA,GAAGA,CAACA,UAACA,SAASA;YAChGA,MAAMA,CAACA,SAASA,CAACA,MAAMA,CAACA;QAC5BA,CAACA,CAACA,CAACA;IACPA,CAACA;IACLN,kBAACA;AAADA,CAzBA,AAyBCA,IAAA;AAzBY,mBAAW,cAyBvB,CAAA","file":"utils/type-checker.js","sourcesContent":["import * as ts from \"typescript\";\r\nimport {Type} from \"./../types\";\r\n\r\nexport class TypeChecker {\r\n    constructor(private typeChecker: ts.TypeChecker, private node: ts.Node) {\r\n    }\r\n\r\n    getSymbolAtLocation(node: ts.Node): ts.Symbol {\r\n        return (node as any).symbol;\r\n    }\r\n\r\n    getTypeOfSymbol(symbol: ts.Symbol) {\r\n        return new Type(this.typeChecker, this.typeChecker.getTypeOfSymbolAtLocation(symbol, this.node), this.node);\r\n    }\r\n\r\n    getSymbolsInScope(node: ts.Node, flags: ts.SymbolFlags) {\r\n        return this.typeChecker.getSymbolsInScope(node, flags);\r\n    }\r\n\r\n    getFullyQualifiedName(symbol: ts.Symbol) {\r\n        return this.typeChecker.getFullyQualifiedName(symbol);\r\n    }\r\n\r\n    getBaseTypeSymbols(classSymbol: ts.Symbol) {\r\n        return this.typeChecker.getBaseTypes(this.getTypeOfSymbol(classSymbol).tsType as any).map((baseTypes) => {\r\n            return baseTypes.symbol;\r\n        });\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}