{"version":3,"sources":["utils/definition-cache.ts"],"names":["DefinitionCache","DefinitionCache.constructor","DefinitionCache.getClassDefinition","CacheContainer","CacheContainer.constructor","CacheContainer.get","CacheContainer.add"],"mappings":"AAAA,4BAA+C,kBAAkB,CAAC,CAAA;AAIlE;IAGIA,yBAAoBA,WAAwBA;QAAxBC,gBAAWA,GAAXA,WAAWA,CAAaA;QAFpCA,YAAOA,GAAGA,IAAIA,cAAcA,EAAmBA,CAACA;IAGxDA,CAACA;IAEDD,4CAAkBA,GAAlBA,UAAmBA,MAAiBA;QAApCE,iBAaCA;QAZGA,IAAIA,eAAeA,GAAGA,IAAIA,CAACA,OAAOA,CAACA,GAAGA,CAACA,MAAMA,CAACA,CAACA;QAE/CA,EAAEA,CAACA,CAACA,eAAeA,IAAIA,IAAIA,CAACA,CAACA,CAACA;YAC1BA,eAAeA,GAAGA,IAAIA,6BAAeA,CACjCA,IAAIA,CAACA,WAAWA,EAChBA,MAAMA,EACNA,IAAIA,CAACA,WAAWA,CAACA,kBAAkBA,CAACA,MAAMA,CAACA,CAACA,GAAGA,CAACA,UAACA,IAAIA,IAAKA,OAAAA,KAAIA,CAACA,kBAAkBA,CAACA,IAAIA,CAACA,EAA7BA,CAA6BA,CAACA,CAACA,CAACA;YAE9FA,IAAIA,CAACA,OAAOA,CAACA,GAAGA,CAACA,MAAMA,EAAEA,eAAeA,CAACA,CAACA;QAC9CA,CAACA;QAEDA,MAAMA,CAACA,eAAeA,CAACA;IAC3BA,CAACA;IACLF,sBAACA;AAADA,CApBA,AAoBCA,IAAA;AApBY,uBAAe,kBAoB3B,CAAA;AAOD;IAAAG;QACYC,eAAUA,GAAmBA,EAAEA,CAACA;IAe5CA,CAACA;IAbGD,4BAAGA,GAAHA,UAAIA,MAAiBA;QACjBE,GAAGA,CAACA,CAAkBA,UAAeA,EAAfA,KAAAA,IAAIA,CAACA,UAAUA,EAAhCA,cAAaA,EAAbA,IAAgCA,CAACA;YAAjCA,IAAIA,SAASA,SAAAA;YACdA,EAAEA,CAACA,CAACA,SAASA,CAACA,MAAMA,KAAKA,MAAMA,CAACA,CAACA,CAACA;gBAC9BA,MAAMA,CAACA,SAASA,CAACA,UAAUA,CAACA;YAChCA,CAACA;SACJA;QAEDA,MAAMA,CAACA,IAAIA,CAACA;IAChBA,CAACA;IAEDF,4BAAGA,GAAHA,UAAIA,MAAiBA,EAAEA,UAAaA;QAChCG,IAAIA,CAACA,UAAUA,CAACA,IAAIA,CAACA,EAAEA,MAAMA,EAAEA,MAAMA,EAAEA,UAAUA,EAAEA,UAAUA,EAAEA,CAACA,CAACA;IACrEA,CAACA;IACLH,qBAACA;AAADA,CAhBA,AAgBCA,IAAA","file":"utils/definition-cache.js","sourcesContent":["import {NamedDefinition, ClassDefinition} from \"./../definitions\";\r\nimport {TypeChecker} from \"./../utils\";\r\nimport * as ts from \"typescript\";\r\n\r\nexport class DefinitionCache {\r\n    private classes = new CacheContainer<ClassDefinition>();\r\n\r\n    constructor(private typeChecker: TypeChecker) {\r\n    }\r\n\r\n    getClassDefinition(symbol: ts.Symbol) {\r\n        let classDefinition = this.classes.get(symbol);\r\n\r\n        if (classDefinition == null) {\r\n            classDefinition = new ClassDefinition(\r\n                this.typeChecker,\r\n                symbol,\r\n                this.typeChecker.getBaseTypeSymbols(symbol).map((base) => this.getClassDefinition(base)));\r\n\r\n            this.classes.add(symbol, classDefinition);\r\n        }\r\n\r\n        return classDefinition;\r\n    }\r\n}\r\n\r\ninterface CacheItem<T extends NamedDefinition> {\r\n    symbol: ts.Symbol;\r\n    definition: T;\r\n}\r\n\r\nclass CacheContainer<T extends NamedDefinition> {\r\n    private cacheItems: CacheItem<T>[] = [];\r\n\r\n    get(symbol: ts.Symbol) {\r\n        for (let cacheItem of this.cacheItems) {\r\n            if (cacheItem.symbol === symbol) {\r\n                return cacheItem.definition;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    add(symbol: ts.Symbol, definition: T) {\r\n        this.cacheItems.push({ symbol: symbol, definition: definition });\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}